created: 20200430081829647
modified: 20210321114338591
tags: 服务治理
title: 服务治理能力
type: text/vnd.tiddlywiki

! 识别服务节点是否存活

* 心跳开关保护机制
* 服务节点摘除保护机制
* 静态注册中心

! 负载均衡

* 随机算法
* 轮询算法
* 加权轮询算法
* 最少活跃连接算法
* 一致性 hash 算法
* 自适应最优选择算法

! 服务路由

!! 规则

* 条件路由
* 脚本路由

!! 获取方式

* 本地配置
* 配置中心管理
* 动态下发

! 服务端故障处理

!!! 集群故障

尽量让故障处理自动化。

!!!! 限流（限制流量）

指标

* 每秒请求量 QPS
* 工作线程数

!!!! 降级（通过停止系统中的某些功能，来保证系统整体的可用性）

> 通过开关来实现。
> 降级要按照对业务的影响程度进行分级，一般分为三级。

!!! 单 IDC 故障

流量切换方式

* 基于 DNS 解析
* 基于 RPC 分组

!!! 单机故障

> 自动重启。

! 服务调用失败的处理手段

* 超时

> 找到比较合适的超时时间需要根据正常情况下，服务提供者的服务水平来决定。

* 重试

> 在实际服务调用时，经常还要设置一个服务调用超时后的重试次数。
> 对于非幂等的也就是同一个服务调用重复多次返回结果不一样的来说，不可以重试。

* 双发

> 同时发起两次服务调用。
> “备份请求”（Backup Requests）。服务消费者发起一次服务调用后，在给定的时间内如果没有返回请求结果，那么服务消费者就立刻发起另一次服务调用。
> 备份请求要设置一个最大重试比例。可以设置成 15%。

* 熔断

> 熔断就是把客户端的每一次服务调用用断路器封装起来，通过断路器来监控每一次服务调用。如果某一段时间内，服务调用失败的次数达到一定阈值，那么断路器就会被触发，后续的服务调用就直接返回，也就不会再向服务提供者发起请求了。

> [[Netflix/Hystrix|https://github.com/Netflix/Hystrix]]

! 管理服务配置

* 本地配置
* 配置中心

> 把服务的各种配置，如代码里配置的各种参数、服务降级的开关甚至依赖的资源等都在一个地方统一进行管理。服务启动时，可以自动从配置中心中拉取所需的配置，并且如果有配置变更的情况，同样可以自动从配置中心拉取最新的配置信息，服务无须重新发布。
> ''选型''
> [[Spring Cloud Config|https://github.com/spring-cloud/spring-cloud-config]]
> [[百度 Disconf|https://github.com/knightliao/disconf]]
> [[携程 Apollo|https://github.com/ctripcorp/apollo]]
> ''场景''
> 资源服务化
> 业务动态降级
> 分组流量切换
